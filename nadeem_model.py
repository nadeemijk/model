# -*- coding: utf-8 -*-
"""nadeem_model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d6MILmBVNaJCB-QwFglmOLDx7fQvgm8a
"""

import pandas as pd

# Load training data
train_df = pd.read_csv("/content/train_LZdllcl.csv")

train_df.drop(columns=['employee_id'], inplace=True)

train_df['education'] = train_df['education'].fillna('Unknown')
train_df['previous_year_rating'] = train_df['previous_year_rating'].fillna(train_df['previous_year_rating'].median())

from sklearn.preprocessing import LabelEncoder

# Columns to label encode
cat_cols = ['department', 'region', 'education', 'gender', 'recruitment_channel']

# Create a dictionary to store the encoders for each column
label_encoders = {}

for col in cat_cols:
    le = LabelEncoder()
    # Fit on train column
    train_df[col] = train_df[col].astype(str)  # ensure it's string type
    train_df[col] = le.fit_transform(train_df[col])
    label_encoders[col] = le

train_df.head()

# Separate features and target
X = train_df.drop(columns=['is_promoted'])
y = train_df['is_promoted']

# Split into train and validation sets
from sklearn.model_selection import train_test_split
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)


from xgboost import XGBClassifier
model = XGBClassifier(
    n_estimators=300,
    max_depth=7,
    learning_rate=0.05,
    subsample=0.8,
    colsample_bytree=0.6,
    scale_pos_weight=1,
    use_label_encoder=False,
    eval_metric='logloss',
    random_state=42
)

model.fit(X_train, y_train)


from sklearn.metrics import classification_report, f1_score
y_pred = model.predict(X_val)
print("F1 Score:", f1_score(y_val, y_pred))
print(classification_report(y_val, y_pred))

test_df = pd.read_csv("/content/test_2umaH9m.csv")

test_df.drop(columns=['employee_id'], inplace=True)

test_df['education'] = test_df['education'].fillna('Unknown')

median_rating_train = train_df['previous_year_rating'].median()


test_df['previous_year_rating'] = test_df['previous_year_rating'].fillna(median_rating_train)

from sklearn.preprocessing import LabelEncoder


cat_cols = ['department', 'region', 'education', 'gender', 'recruitment_channel']


label_encoders = {}

for col in cat_cols:
    le = LabelEncoder()
    # Fit on train column
    test_df[col] = test_df[col].astype(str)
    test_df[col] = le.fit_transform(test_df[col])
    label_encoders[col] = le

test_df.head()

print("train shape",train_df.shape)
print("test shape",  test_df.shape)

test_df['is_promoted'] = model.predict(test_df)

test_df.tail()

test_df.to_csv('test_with_predictions.csv', index=False)

test_df['is_promoted'].value_counts()

